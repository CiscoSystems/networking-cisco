a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   1) # Copyright 2015 Cisco Systems, Inc.  All rights reserved.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   2) #
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   3) #    Licensed under the Apache License, Version 2.0 (the "License"); you may
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   4) #    not use this file except in compliance with the License. You may obtain
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   5) #    a copy of the License at
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   6) #
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   7) #         http://www.apache.org/licenses/LICENSE-2.0
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   8) #
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200   9) #    Unless required by applicable law or agreed to in writing, software
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  10) #    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  11) #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  12) #    License for the specific language governing permissions and limitations
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  13) #    under the License.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  14) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  15) import logging
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  16) import netaddr
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  17) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  18) from neutron.i18n import _LE, _LI
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  19) from neutron.common import constants
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  20) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  21) from networking_cisco.plugins.cisco.cfg_agent import cfg_exceptions as cfg_exc
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  22) from networking_cisco.plugins.cisco.cfg_agent.device_drivers.asr1k import (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  23)     asr1k_snippets)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  24) from networking_cisco.plugins.cisco.cfg_agent.device_drivers.asr1k \
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  25)     import asr1k_cfg_syncer
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  26) from networking_cisco.plugins.cisco.cfg_agent.device_drivers.csr1kv import (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  27)     cisco_csr1kv_snippets as snippets)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  28) from networking_cisco.plugins.cisco.cfg_agent.device_drivers.csr1kv import (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  29)     iosxe_routing_driver as iosxe_driver)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  30) from networking_cisco.plugins.cisco.common import cisco_constants
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  31) from networking_cisco.plugins.cisco.extensions import ha
76768577 (Sridar Kandaswamy 2015-10-11 19:53:36 -0700  32) from networking_cisco.plugins.cisco.extensions import routerrole
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  33) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  34) LOG = logging.getLogger(__name__)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  35) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  36) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  37) DEVICE_OWNER_ROUTER_GW = constants.DEVICE_OWNER_ROUTER_GW
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  38) HA_INFO = 'ha_info'
76768577 (Sridar Kandaswamy 2015-10-11 19:53:36 -0700  39) ROUTER_ROLE_ATTR = routerrole.ROUTER_ROLE_ATTR
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  40) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  41) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  42) class ASR1kRoutingDriver(iosxe_driver.IosXeRoutingDriver):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  43) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  44)     def __init__(self, **device_params):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  45)         super(ASR1kRoutingDriver, self).__init__(**device_params)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  46)         self._fullsync = False
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  47)         self._deployment_id = "zxy"
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  48)         self.hosting_device = {'id': device_params.get('id'),
c8bb1e29 (Hareesh Puthalath 2015-10-07 17:45:02 +0200  49)                                'device_id': device_params.get('device_id')}
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  50) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  51)     # ============== Public functions ==============
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  52) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  53)     def internal_network_added(self, ri, port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  54)         gw_ip = port['subnets'][0]['gateway_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  55)         if self._is_port_v6(port):
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700  56)             LOG.debug("Adding IPv6 internal network port: %(port)s for router "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700  57)                       "%(r_id)s", {'port': port, 'r_id': ri.id})
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  58)             self._create_sub_interface_v6(ri, port, False, gw_ip)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  59)         else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  60)             # IPv4 handling
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  61)             if self._is_global_router(ri):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  62)                 # The global router is modeled as the default vrf
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  63)                 # in the ASR.  When an external gateway is configured,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  64)                 # a normal "internal" interface is created in the default
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  65)                 # vrf that is in the same subnet as the ext-net.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  66)                 LOG.debug("++++ global router handling")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  67)                 self.external_gateway_added(ri, port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  68)             else:
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700  69)                 LOG.debug("Adding IPv4 internal network port: %(port)s "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700  70)                           "for router %(r_id)s", {'port': port, 'r_id': ri.id})
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200  71)                 self._create_sub_interface(
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200  72)                     ri, port, is_external=False, gw_ip=gw_ip)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  73) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  74)     def external_gateway_added(self, ri, ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  75)         # global router handles IP assignment, HSRP setup
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  76)         # tenant router handles interface creation and default route
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  77)         # within VRFs
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  78)         if self._is_global_router(ri):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  79)             self._handle_external_gateway_added_global_router(ri, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  80)         else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  81)             self._handle_external_gateway_added_normal_router(ri, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  82) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  83)     def external_gateway_removed(self, ri, ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  84)         if self._is_global_router(ri):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  85)             self._remove_sub_interface(ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  86)         else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  87)             ex_gw_ip = ext_gw_port['subnets'][0]['gateway_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  88)             if (ex_gw_ip and
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  89)                     ext_gw_port['device_owner'] == DEVICE_OWNER_ROUTER_GW):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  90)                 # Remove default route via this network's gateway ip
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  91)                 if self._is_port_v6(ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  92)                     self._remove_default_route_v6(ri, ex_gw_ip, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  93)                 else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  94)                     self._set_nat_pool(ri, ext_gw_port, True)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  95)                     self._remove_default_route(ri, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  96) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200  97)     def floating_ip_added(self, ri, ext_gw_port, floating_ip, fixed_ip):
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200  98)         self._add_floating_ip(ri, ext_gw_port, floating_ip, fixed_ip)
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200  99) 
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 100)     def floating_ip_removed(self, ri, ext_gw_port, floating_ip, fixed_ip):
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 101)         self._remove_floating_ip(ri, ext_gw_port, floating_ip, fixed_ip)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 102) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 103)     def disable_internal_network_NAT(self, ri, port, ext_gw_port,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 104)                                      itfc_deleted=False):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 105) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 106)         self._remove_internal_nw_nat_rules(ri,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 107)                                            [port],
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 108)                                            ext_gw_port,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 109)                                            itfc_deleted)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 110) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 111)     def cleanup_invalid_cfg(self, hd, routers):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 112) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 113)         cfg_syncer = asr1k_cfg_syncer.ConfigSyncer(routers, self, hd)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 114)         cfg_syncer.delete_invalid_cfg()
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 115) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 116)     # ============== Internal "preparation" functions  ==============
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 117) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 118)     def _get_acl_name_from_vlan(self, vlan):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 119)         return "neutron_acl_%s" % vlan
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 120) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 121)     def _get_interface_name_from_hosting_port(self, port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 122)         """
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 123)         Extract the underlying subinterface name for a port
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 124)         e.g. Port-channel10.200 or GigabitEthernet0/0/0.500
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 125)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 126)         try:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 127)             vlan = port['hosting_info']['segmentation_id']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 128)             int_prefix = port['hosting_info']['physical_interface']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 129)             return '%s.%s' % (int_prefix, vlan)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 130)         except KeyError as e:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 131)             params = {'key': e}
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 132)             raise cfg_exc.DriverExpectedKeyNotSetException(**params)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 133) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 134)     def _enable_itfcs(self, conn):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 135)         """For ASR we don't need to do anything"""
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 136)         return True
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 137) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 138)     def _handle_external_gateway_added_global_router(self, ri, ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 139)         # TODO(bobmel): Get the HA virtual IP correctly
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 140)         # TODO(sridar):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 141)         # This seems to work fine. Keeping this todo until more testing.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 142)         virtual_gw_port = ext_gw_port["ha_info"]["ha_port"]
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 143)         sub_itfc_ip = virtual_gw_port['fixed_ips'][0]['ip_address']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 144)         if self._is_port_v6(ext_gw_port):
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 145)             LOG.debug("Adding IPv6 external network port: %(port)s for global "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 146)                       "router %(r_id)s", {'port': ext_gw_port['id'],
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 147)                                           'r_id': ri.id})
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 148)             self._create_sub_interface_v6(ri, ext_gw_port, True, sub_itfc_ip)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 149)         else:
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 150)             LOG.debug("Adding IPv4 external network port: %(port)s for global "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 151)                       "router %(r_id)s", {'port': ext_gw_port['id'],
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 152)                                           'r_id': ri.id})
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 153)             self._create_sub_interface(ri, ext_gw_port, True, sub_itfc_ip)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 154) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 155)     def _handle_external_gateway_added_normal_router(self, ri, ext_gw_port):
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 156)         # Default routes are mapped to tenant router VRFs . Global Router
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 157)         # is not aware of tenant routers with ext network assigned. Thus,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 158)         # default route must be handled per tenant router.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 159)         ex_gw_ip = ext_gw_port['subnets'][0]['gateway_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 160)         sub_interface = self._get_interface_name_from_hosting_port(ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 161)         vlan_id = self._get_interface_vlan_from_hosting_port(ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 162)         if (self._fullsync and
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 163)                 int(vlan_id) in self._existing_cfg_dict['interfaces']):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 164)             LOG.debug("Sub-interface already exists, don't create "
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 165)                       "interface")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 166)         else:
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 167)             LOG.debug("Adding IPv4 external network port: %(port)s for tenant "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 168)                       "router %(r_id)s", {'port': ext_gw_port['id'],
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 169)                                           'r_id': ri.id})
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 170)             self._create_ext_sub_interface_enable_only(sub_interface)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 171)         if ex_gw_ip:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 172)             # Set default route via this network's gateway ip
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 173)             if self._is_port_v6(ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 174)                 self._add_default_route_v6(ri, ex_gw_ip, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 175)             else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 176)                 self._set_nat_pool(ri, ext_gw_port, False)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 177)                 self._add_default_route(ri, ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 178) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 179)     def _create_sub_interface(self, ri, port, is_external=False, gw_ip=""):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 180)         vlan = self._get_interface_vlan_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 181)         if (self._fullsync and
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 182)                 int(vlan) in self._existing_cfg_dict['interfaces']):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 183)             LOG.info(_LI("Sub-interface already exists, skipping"))
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 184)             return
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 185)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 186)         net_mask = netaddr.IPNetwork(port['ip_cidr']).netmask
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 187)         hsrp_ip = port['fixed_ips'][0]['ip_address']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 188)         sub_interface = self._get_interface_name_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 189)         self._do_create_sub_interface(sub_interface, vlan, vrf_name, hsrp_ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 190)                                       net_mask, is_external)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 191)         # Always do HSRP
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 192)         self._add_ha_hsrp(ri, port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 193) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 194)     def _do_create_sub_interface(self, sub_interface, vlan_id, vrf_name, ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 195)                                  mask, is_external=False):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 196)         if is_external is True:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 197)             conf_str = asr1k_snippets.CREATE_SUBINTERFACE_EXTERNAL_WITH_ID % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 198)                 sub_interface, vlan_id, ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 199)                 mask)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 200)         else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 201)             conf_str = asr1k_snippets.CREATE_SUBINTERFACE_WITH_ID % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 202)                 sub_interface, vlan_id,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 203)                 vrf_name, ip, mask)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 204)         self._edit_running_config(conf_str, 'CREATE_SUBINTERFACE_WITH_ID')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 205) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 206)     def _create_ext_sub_interface_enable_only(self, sub_interface):
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 207)         LOG.debug("Enabling external network sub interface: %s",
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 208)                   sub_interface)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 209)         conf_str = snippets.ENABLE_INTF % sub_interface
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 210)         self._edit_running_config(conf_str, 'ENABLE_INTF')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 211) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 212)     def _set_nat_pool(self, ri, gw_port, is_delete):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 213)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 214)         # TODO(sridar) reverting to old model, needs more investigation
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 215)         # and cleanup
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 216)         pool_ip = gw_port['fixed_ips'][0]['ip_address']
c8bb1e29 (Hareesh Puthalath 2015-10-07 17:45:02 +0200 217)         pool_ip_prefix_len = gw_port['fixed_ips'][0]['prefixlen']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 218)         # pool_info = gw_port['nat_pool_info']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 219)         # pool_ip = pool_info['pool_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 220)         pool_name = "%s_nat_pool" % (vrf_name)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 221)         #pool_net = netaddr.IPNetwork(pool_info['pool_cidr'])
c8bb1e29 (Hareesh Puthalath 2015-10-07 17:45:02 +0200 222)         #pool_net = netaddr.IPNetwork(gw_port['ip_cidr'])
c8bb1e29 (Hareesh Puthalath 2015-10-07 17:45:02 +0200 223)         pool_net = "%s/%s" % (pool_ip, pool_ip_prefix_len)
c8bb1e29 (Hareesh Puthalath 2015-10-07 17:45:02 +0200 224)         pool_net = netaddr.IPNetwork(pool_net)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 225)         if self._fullsync and pool_ip in self._existing_cfg_dict['pools']:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 226)             LOG.info(_LI("Pool already exists, skipping"))
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 227)             return
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 228) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 229)         #LOG.debug("SET_NAT_POOL pool netmask: %s, gw_port %s" % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 230)         # pool_net.netmask, gw_port))
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 231)         try:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 232)             if is_delete:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 233)                 conf_str = asr1k_snippets.DELETE_NAT_POOL % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 234)                     pool_name, pool_ip, pool_ip, pool_net.netmask)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 235)                 #self._edit_running_config(conf_str, '%s DELETE_NAT_POOL' %
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 236)                 #                          self.target_asr['name'])
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 237)                 # TODO(update so that hosting device name is passed down)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 238)                 self._edit_running_config(conf_str, 'DELETE_NAT_POOL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 239) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 240)             else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 241)                 conf_str = asr1k_snippets.CREATE_NAT_POOL % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 242)                     pool_name, pool_ip, pool_ip, pool_net.netmask)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 243)                 #self._edit_running_config(conf_str, '%s CREATE_NAT_POOL' %
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 244)                 #                          self.target_asr['name'])
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 245)                 # TODO(update so that hosting device name is passed down)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 246)                 self._edit_running_config(conf_str, 'CREATE_NAT_POOL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 247)         #except cfg_exc.CSR1kvConfigException as cse:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 248)         except Exception as cse:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 249)             LOG.error(_LE("Temporary disable NAT_POOL exception handling: "
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 250)                           "%s"), cse)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 251) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 252)     def _add_default_route(self, ri, ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 253)         if self._fullsync and (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 254)                     ri.router_id in self._existing_cfg_dict['routes']):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 255)             LOG.debug("Default route already exists, skipping")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 256)             return
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 257)         ext_gw_ip = ext_gw_port['subnets'][0]['gateway_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 258)         if ext_gw_ip:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 259)             vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 260)             out_itfc = self._get_interface_name_from_hosting_port(ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 261)             conf_str = asr1k_snippets.SET_DEFAULT_ROUTE_WITH_INTF % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 262)                 vrf_name, out_itfc, ext_gw_ip)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 263)             self._edit_running_config(conf_str, 'SET_DEFAULT_ROUTE_WITH_INTF')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 264) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 265)     def _remove_default_route(self, ri, ext_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 266)         ext_gw_ip = ext_gw_port['subnets'][0]['gateway_ip']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 267)         if ext_gw_ip:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 268)             vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 269)             out_itfc = self._get_interface_name_from_hosting_port(ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 270)             conf_str = asr1k_snippets.REMOVE_DEFAULT_ROUTE_WITH_INTF % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 271)                 vrf_name, out_itfc, ext_gw_ip)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 272)             self._edit_running_config(conf_str,
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 273)                                       'REMOVE_DEFAULT_ROUTE_WITH_INTF')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 274) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 275)     def _add_ha_hsrp(self, ri, port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 276)         priority = ri.router[ha.DETAILS][ha.PRIORITY]
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 277)         port_ha_info = port[HA_INFO]
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 278)         group = port_ha_info['group']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 279)         ip = port_ha_info['ha_port']['fixed_ips'][0]['ip_address']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 280)         vlan = port['hosting_info']['segmentation_id']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 281)         if ip and group and priority:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 282)             vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 283)             sub_interface = self._get_interface_name_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 284)             self._do_set_ha_hsrp(sub_interface, vrf_name,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 285)                                  priority, group, ip, vlan)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 286) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 287)     def _do_set_ha_hsrp(self, sub_interface, vrf_name, priority, group,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 288)                         ip, vlan):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 289)         conf_str = asr1k_snippets.SET_INTC_ASR_HSRP_EXTERNAL % (sub_interface,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 290)              group, priority, group, ip, group, group, group, vlan)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 291)         self._edit_running_config(conf_str, 'SET_INTC_ASR_HSRP_EXTERNAL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 292) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 293)     def _create_sub_interface_v6(self, ri, port, is_external=False, gw_ip=""):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 294)         if self._v6_port_needs_config(port) is not True:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 295)             return
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 296)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 297)         ip_cidr = port['ip_cidr']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 298)         vlan = self._get_interface_vlan_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 299)         sub_interface = self._get_interface_name_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 300)         self._do_create_sub_interface_v6(sub_interface, vlan, vrf_name,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 301)                                          ip_cidr, is_external)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 302)         # Always do HSRP
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 303)         self._add_ha_HSRP_v6(ri, port, ip_cidr, is_external)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 304) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 305)     def _do_create_sub_interface_v6(self, sub_interface, vlan_id, vrf_name,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 306)                                    ip_cidr, is_external=False):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 307)         if is_external is True:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 308)             conf_str = asr1k_snippets.CREATE_SUBINTERFACE_V6_NO_VRF_WITH_ID % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 309)                 sub_interface, self._deployment_id, vlan_id,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 310)                 ip_cidr)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 311)         else:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 312)             conf_str = asr1k_snippets.CREATE_SUBINTERFACE_V6_WITH_ID % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 313)                 sub_interface, self._deployment_id, vlan_id,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 314)                 vrf_name, ip_cidr)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 315)         self._edit_running_config(conf_str, '%s CREATE_SUBINTERFACE_V6' %
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 316)                                   self.hosting_device['name'])
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 317) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 318)     def _add_default_route_v6(self, ri, gw_ip, gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 319)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 320)         conf_str = asr1k_snippets.SET_DEFAULT_ROUTE_V6_WITH_INTF % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 321)             vrf_name, gw_ip)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 322)         self._edit_running_config(conf_str, 'SET_DEFAULT_ROUTE_V6_WITH_INTF')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 323) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 324)     def _remove_default_route_v6(self, ri, gw_ip, gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 325)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 326)         sub_interface = self._get_interface_name_from_hosting_port(gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 327)         self._remove_default_static_route_v6(gw_ip, vrf_name, sub_interface)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 328) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 329)     def _remove_default_static_route_v6(self, gw_ip, vrf, out_intf):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 330)         conf_str = asr1k_snippets.REMOVE_DEFAULT_ROUTE_V6_WITH_INTF % (
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 331)             vrf, gw_ip)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 332)         self._edit_running_config(conf_str,
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 333)                                   'REMOVE_DEFAULT_ROUTE_V6_WITH_INTF')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 334) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 335)     def _add_ha_HSRP_v6(self, ri, port, ip, is_external=False):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 336)         if self._v6_port_needs_config(port) is not True:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 337)             return
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 338)         vlan = self._get_interface_vlan_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 339)         group = vlan
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 340)         asr_ent = self.hosting_device
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 341)         priority = asr_ent['order']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 342)         sub_interface = self._get_interface_name_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 343)         self._set_ha_HSRP_v6(sub_interface, priority, group, is_external)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 344) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 345)     def _port_needs_config(self, port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 346)         #ToDo(Hareesh): Need to check this!
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 347)         if not self._port_is_hsrp(port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 348)             LOG.debug("Ignoring non-HSRP interface")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 349)             return False
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 350)         asr_ent = self._get_asr_ent_from_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 351)         if asr_ent['name'] != self.hosting_device['name']:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 352)             LOG.debug("Ignoring interface for non-target ASR1k")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 353)             return False
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 354)         return True
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 355) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 356)     @staticmethod
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 357)     def _port_is_hsrp(port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 358)         hsrp_types = [constants.DEVICE_OWNER_ROUTER_HA_GW,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 359)                       constants.DEVICE_OWNER_ROUTER_HA_INTF]
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 360)         return port['device_owner'] in hsrp_types
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 361) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 362)     @staticmethod
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 363)     def _is_global_router(ri):
76768577 (Sridar Kandaswamy 2015-10-11 19:53:36 -0700 364)         return (ri.router.get(ROUTER_ROLE_ATTR) ==
76768577 (Sridar Kandaswamy 2015-10-11 19:53:36 -0700 365)                 cisco_constants.ROUTER_ROLE_GLOBAL)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 366) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 367)     @staticmethod
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 368)     def _is_port_v6(port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 369)         return netaddr.IPNetwork(port['subnets'][0]['cidr']).version == 6
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 370) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 371)     @staticmethod
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 372)     def _get_hsrp_grp_num_from_ri(ri):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 373)         return ri.router['ha_info']['group']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 374) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 375)     def _nat_rules_for_internet_access(self,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 376)                                        acl_no,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 377)                                        network,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 378)                                        netmask,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 379)                                        inner_itfc,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 380)                                        outer_itfc,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 381)                                        vrf_name):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 382)         """Configure the NAT rules for an internal network.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 383) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 384)         Configuring NAT rules in the CSR1kv is a three step process. First
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 385)         create an ACL for the IP range of the internal network. Then enable
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 386)         dynamic source NATing on the external interface of the CSR for this
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 387)         ACL and VRF of the neutron router. Finally enable NAT on the
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 388)         interfaces of the CSR where the internal and external networks are
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 389)         connected.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 390) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 391)         :param acl_no: ACL number of the internal network.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 392)         :param network: internal network
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 393)         :param netmask: netmask of the internal network.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 394)         :param inner_itfc: (name of) interface connected to the internal
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 395)         network
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 396)         :param outer_itfc: (name of) interface connected to the external
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 397)         network
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 398)         :param vrf_name: VRF corresponding to this virtual router
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 399)         :return: True if configuration succeeded
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 400)         :raises: networking_cisco.plugins.cisco.cfg_agent.cfg_exceptions.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 401)         CSR1kvConfigException
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 402)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 403)         conf_str = snippets.CREATE_ACL % (acl_no, network, netmask)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 404)         try:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 405)             self._edit_running_config(conf_str, 'CREATE_ACL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 406)         except Exception as acl_e:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 407)             LOG.debug("Ignore exception for CREATE_ACL: %s", acl_e)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 408) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 409)         pool_name = "%s_nat_pool" % vrf_name
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 410)         conf_str = asr1k_snippets.SET_DYN_SRC_TRL_POOL % (acl_no, pool_name,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 411)                                                           vrf_name)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 412)         try:
825f4c6c (Hareesh Puthalath 2015-10-07 17:49:15 +0200 413)             self._edit_running_config(conf_str, 'SET_DYN_SRC_TRL_POOL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 414)         except Exception as dyn_nat_e:
825f4c6c (Hareesh Puthalath 2015-10-07 17:49:15 +0200 415)             LOG.error(_LE("Ignore exception for SET_DYN_SRC_TRL_POOL: %s"),
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 416)                       dyn_nat_e)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 417) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 418)         conf_str = snippets.SET_NAT % (inner_itfc, 'inside')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 419)         self._edit_running_config(conf_str, 'SET_NAT')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 420) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 421)         conf_str = snippets.SET_NAT % (outer_itfc, 'outside')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 422)         self._edit_running_config(conf_str, 'SET_NAT')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 423) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 424)     def _remove_internal_nw_nat_rules(self,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 425)                                       ri,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 426)                                       ports,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 427)                                       ext_port,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 428)                                       intf_deleted=False):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 429)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 430)         Removes the NAT rules already configured when an internal network is
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 431)         removed.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 432) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 433)         :param ri          -- router-info object
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 434)         :param ports       -- list of affected ports where network nat rules
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 435)                               was affected
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 436)         :param ext_port    -- external facing port
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 437)         :param intf_deleted-- If True, indicates that the subinterface was
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 438)                               deleted.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 439)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 440)         acls = []
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 441)         # first disable nat in all inner ports
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 442)         for port in ports:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 443)             in_itfc_name = self._get_interface_name_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 444)             inner_vlan = self._get_interface_vlan_from_hosting_port(port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 445)             acls.append(self._get_acl_name_from_vlan(inner_vlan))
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 446) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 447)             if not intf_deleted:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 448)                 self._remove_interface_nat(in_itfc_name, 'inside')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 449)         # There is a possibility that the dynamic NAT rule cannot be removed
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 450)         # from the running config, if there is still traffic in the inner
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 451)         # interface causing a rule to be present in the NAT translation
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 452)         # table. For this we give 2 seconds for the 'inside NAT rule' to
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 453)         # expire and then clear the NAT translation table manually. This can
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 454)         # be costly and hence is not enabled here, pending further
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 455)         # sinvestigation.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 456) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 457)         # LOG.debug("Sleep for 2 seconds before clearing NAT rules")
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 458)         # time.sleep(2)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 459)         # clear the NAT translation table
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 460)         # self._remove_dyn_nat_translations()
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 461) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 462)         # remove dynamic nat rules and acls
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 463)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 464)         ext_itfc_name = self._get_interface_name_from_hosting_port(ext_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 465)         for acl in acls:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 466)             self._remove_dyn_nat_rule(acl, ext_itfc_name, vrf_name)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 467) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 468)     def _remove_dyn_nat_rule(self, acl_no, outer_itfc_name, vrf_name):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 469)         try:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 470)             pool_name = "%s_nat_pool" % (vrf_name)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 471)             confstr = asr1k_snippets.REMOVE_DYN_SRC_TRL_POOL % \
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 472)                 (acl_no, pool_name, vrf_name)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 473)             self._edit_running_config(confstr, 'REMOVE_DYN_SRC_TRL_POOL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 474)         except cfg_exc.CSR1kvConfigException as cse:
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 475)             LOG.error(_LE("temporary disable REMOVE_DYN_SRC_TRL_POOL"
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 476)                       " exception handling: %s"), (cse))
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 477) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 478)         conf_str = snippets.REMOVE_ACL % acl_no
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 479)         self._edit_running_config(conf_str, 'REMOVE_ACL')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 480) 
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 481)     def _add_floating_ip(self, ri, ex_gw_port, floating_ip, fixed_ip):
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 482)         vrf_name = self._get_vrf_name(ri)
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 483)         self._asr_do_add_floating_ip(floating_ip, fixed_ip,
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 484)                                      vrf_name, ex_gw_port)
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 485) 
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 486)     def _asr_do_add_floating_ip(self, floating_ip, fixed_ip, vrf, ex_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 487)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 488)         To implement a floating ip, an ip static nat is configured in the
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 489)         underlying router ex_gw_port contains data to derive the vlan
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 490)         associated with related subnet for the fixed ip.  The vlan in turn
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 491)         is applied to the redundancy parameter for setting the IP NAT.
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 492)         """
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 493)         vlan = ex_gw_port['hosting_info']['segmentation_id']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 494)         hsrp_grp = ex_gw_port['ha_info']['group']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 495) 
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 496)         LOG.debug("add floating_ip: %(fip)s, fixed_ip: %(fixed_ip)s, "
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 497)                   "vrf: %(vrf)s, ex_gw_port: %(port)s",
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 498)                   {'fip': floating_ip, 'fixed_ip': fixed_ip, 'vrf': vrf,
89b70c5d (Sridar Kandaswamy 2015-10-11 21:42:03 -0700 499)                    'port': ex_gw_port})
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 500) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 501)         confstr = asr1k_snippets.SET_STATIC_SRC_TRL_NO_VRF_MATCH % \
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 502)             (fixed_ip, floating_ip, vrf, hsrp_grp, vlan)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 503)         self._edit_running_config(confstr, 'SET_STATIC_SRC_TRL_NO_VRF_MATCH')
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 504) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 505)     def _remove_floating_ip(self, ri, ext_gw_port, floating_ip, fixed_ip):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 506)         vrf_name = self._get_vrf_name(ri)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 507)         self._asr_do_remove_floating_ip(floating_ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 508)                                         fixed_ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 509)                                         vrf_name,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 510)                                         ext_gw_port)
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 511) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 512)     def _asr_do_remove_floating_ip(self, floating_ip,
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 513)                                    fixed_ip, vrf, ex_gw_port):
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 514)         vlan = ex_gw_port['hosting_info']['segmentation_id']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 515)         hsrp_grp = ex_gw_port['ha_info']['group']
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 516) 
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 517)         confstr = asr1k_snippets.REMOVE_STATIC_SRC_TRL_NO_VRF_MATCH % \
a1c28cb7 (Bob Melander      2015-09-27 19:04:08 +0200 518)             (fixed_ip, floating_ip, vrf, hsrp_grp, vlan)
4a82579f (Hareesh Puthalath 2015-10-07 17:33:58 +0200 519)         self._edit_running_config(confstr,
4f32bf59 (Hareesh Puthalath 2015-10-07 17:43:21 +0200 520)                                   'REMOVE_STATIC_SRC_TRL_NO_VRF_MATCH')
